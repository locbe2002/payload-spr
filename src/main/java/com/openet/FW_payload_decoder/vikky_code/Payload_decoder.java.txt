package com.openet.FW_payload_decoder_vk;
import org.apache.commons.io.FileUtils;
import org.json.*;
import java.util.*;
import java.lang.*;
import java.time.Duration;
import java.time.Instant;
import org.apache.commons.cli.*;
import org.h2.Driver;
import org.h2.tools.Server;
import java.sql.*;
import java.io.*;
import java.nio.*;
import javax.xml.parsers.*;
import org.xml.sax.*;
import org.xml.sax.helpers.*;
import org.apache.log4j.Logger;
import org.jdom.*;
import org.jdom.input.SAXBuilder;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import cfg.*;
import avsasn.*;
import avsasn.primitivetypes.*;
import avsasn.ber.*;
import avsasn.codec.*;
import zip.zipTool;
import java.math.BigInteger;
import java.util.zip.DataFormatException;
import java.util.zip.Deflater;
import java.util.zip.Inflater;
import org.apache.commons.csv.CSVRecord;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVFormat;
import com.openet.FW_payload_decoder_vk.MainAvs;

/*
 *
 */
public class Payload_decoder implements ObjectRepository {
    private static Properties props = null;
    private static Connection conn = null;
    private static String H2_Uid = null;
    private static String H2_Pass = null;
    private static String FW_Avs = null;
    private static String FW_SubAvs = null;
    private static String HeaderFields = null;
    private static String Delimiter;
    private static String SubDelimiter;
    private static String Json_Conf;

    private static String propertiesFile = null;
    private static String H2Url = null;
    final static Logger logger = Logger.getLogger(Payload_decoder.class);

    private PreparedStatement selectOperRecs = null;
    private HashMap<String, String> map = new HashMap<>();
    private HashMap<String, ConfigType> mapType = new HashMap<>();
    private List<MainAvs>MainAvses = new ArrayList<>();
    private HashMap<String, String> csvHeader = new HashMap<>();
    /*
     *
     */
    Payload_decoder() throws Exception {
        try {
            Class.forName("org.h2.Driver");
        } catch (Exception e) {
            logger.error("Error locating h2 Driver:!", e);
            return ;
        }
        loadProperties();
        if (props == null) return;
        try {
            H2_Uid = props.getProperty("H2_USERNAME");
            H2_Pass = props.getProperty("H2_PASSWORD");
            FW_Avs = props.getProperty("AVS");
            FW_SubAvs = props.getProperty("SUBAVS");
            HeaderFields = props.getProperty("HEADERS");
            Delimiter = props.getProperty("DEL");
            SubDelimiter = props.getProperty("SUBDEL");
            Json_Conf = props.getProperty("JSON_CONFIG");
            logger.info("Connecting to DB using username: " + H2_Uid + ", passwd: " + H2_Pass + ", URL: " + H2Url);
            conn = DriverManager.getConnection(H2Url, H2_Uid, H2_Pass);
        } catch (Exception e) {
            logger.error("Error locating h2 Driver:!", e);
        }
    }
    /*
     *
     public static void DumpJsonConfig() throws Exception {
     JSONObject JsonObj = new JSONObject();
     JSONArray JsonAr = new JSONArray();
     JSONObject JsonObjSub = new JSONObject();
     JSONArray JsonArSubField = new JSONArray();
     for (MainAvs myavs : MainAvses){
     JsonObj.put("delimiter", myavs.Del);
     JsonObj.put("file_name", myavs.FileName);
     for (String Field : myavs.AvsField){
     JsonAr.put(Field);
     }
     JsonObj.put("fields", JsonAr);
     for (SubAvs mySubAvs:myavs.MSubAvs){
     JsonObjSub.put("name", mySubAvs.SubAvsName);
     JsonObjSub.put("delimiter", mySubAvs.Del);
     for (String Field : mySubAvs.SubAvsField){
     JsonArSubField.put(Field);
     }
     JsonObjSub.put("fields", JsonArSubField);
     JsonObj.put("subavs", JsonObjSub);
     }
     JsonObj.put(myavs.AvsName, JsonObjSub); 
     }
     try{
     logger.info(JsonObj.toString(4));
     }catch(JSONException e) {
     }       
     }
     */
    /*
     *
     */
    public void ReadJsonConfig() throws Exception {
        File file = new File(Json_Conf);
        String content = FileUtils.readFileToString(file, "utf-8");
        JSONObject tomJsonObject = new JSONObject(content);    

        Iterator<String> keys = tomJsonObject.keys();

        while(keys.hasNext()) {
            String key = keys.next();
            if (tomJsonObject.get(key) instanceof JSONObject) {
                JSONObject json = (JSONObject)tomJsonObject.get(key);
                MainAvs TmpMainAvs = new MainAvs(key, json);
//                MainAvs TmpMainAvs = new MainAvs(key, tomJsonObject.getJSONObject(key));
                /*
                   MainAvs TmpMainAvs = new MainAvs();
                   JSONObject AvsObject = tomJsonObject.getJSONObject(key);
                   TmpMainAvs.AvsName = key;
                   TmpMainAvs.Del = AvsObject.getString("delimiter").charAt(0);
                   TmpMainAvs.FileName = AvsObject.getString("file_name");
                   JSONArray AvsFields = AvsObject.getJSONArray("fields");
                   List<Object> AvsField = AvsFields.toList();
                   for (Object Field : AvsField) {
                   TmpMainAvs.AvsField.add((String)Field);
                   }
                   SubAvs TmpSubAvs = new SubAvs();
                   JSONObject SubAvsObject = AvsObject.getJSONObject("subavs");
                   TmpSubAvs.SubAvsName = SubAvsObject.getString("name");
                   TmpSubAvs.Del = SubAvsObject.getString("delimiter").charAt(0);
                   JSONArray SubAvsFields = SubAvsObject.getJSONArray("fields");
                   List<Object> Fields = SubAvsFields.toList();
                   for (Object Field : Fields) {
                   TmpSubAvs.SubAvsField.add((String)Field);
                   }
                   TmpMainAvs.MSubAvs.add(TmpSubAvs);
                   */
                MainAvses.add(TmpMainAvs);
            }
        }
    }
    /*
     *
     */
    public void HeadersToLower() {
        String Ret = null;
        int StrLen = HeaderFields.length();
        if (StrLen > 2 && (HeaderFields.startsWith("\"") && HeaderFields.endsWith("\""))) {
            Ret = HeaderFields.substring(1, StrLen-1).replace(SubDelimiter.charAt(0), Delimiter.charAt(0)).toLowerCase();
        } else Ret = HeaderFields.replace(SubDelimiter.charAt(0), Delimiter.charAt(0)).toLowerCase();
        HeaderFields = Ret;
    }
    /*
     *
     */
    public String getProperty(String key) {
        return props.getProperty(key, "PolicyManager");
    }
    /*
     *
     */
    private void close() {
        try {
            if (conn != null) {
                conn.close();
            }
        } catch (Exception e) {
        }
    }
    /*
     *
     */
    private void loadProperties() {
        props = new Properties();
        try {
            props.load(new FileInputStream(propertiesFile));

        } catch (Exception e) {
            props = null;
        }
    }
    /*
     *
     */
    private List<String> parse(String name, String renderDocument) {
        List<String> set = new ArrayList<String> ();
        try {
            BufferedReader br = new BufferedReader(new StringReader(renderDocument));
            String thisLine = null;
            String reftype = new String("reftype=\"");
            String extend = new String("extends=\"");
            while ((thisLine = br.readLine()) != null) {
                if (thisLine.contains(extend)) {
                    int startpos = thisLine.indexOf(extend) + extend.length();
                    int stoppos = thisLine.indexOf("\"", startpos + 1);
                    String key = thisLine.substring(startpos, stoppos);
                    if (!set.contains(key))
                        if (!map.containsKey(key)) {
                            loadPreparedStatements(key);
                        }
                } else if (thisLine.contains(reftype)) {
                    int startpos = thisLine.indexOf(reftype) + reftype.length();
                    int stoppos = thisLine.indexOf("\"", startpos + 1);
                    String key = thisLine.substring(startpos, stoppos);
                    if (!set.contains(key))
                        if (!map.containsKey(key)) set.add(thisLine.substring(startpos, stoppos));
                }
            }
        } catch (Exception e) {
            logger.error("parse error:!", e);
        }
        return set;
    }
    /*
     *
     */
    private void loadPreparedStatements(String str) {
        try {
            String SELECTFROMAVS = "SELECT * FROM CONFIGTYPES WHERE NAME='" +str + "'";
            PreparedStatement selectRecs = conn.prepareStatement(SELECTFROMAVS);
            ResultSet rs = selectRecs.executeQuery();
            while (rs.next()) {
                String name = rs.getString(1);
                String renderDocument = rs.getString(2);
                List<String> l_set = parse(str, renderDocument);
                if (!map.containsKey(name)) {
                    map.put(name, renderDocument);
                    ConfigType type = new ConfigType(renderDocument, this);
                    mapType.put(name, type);
                }
                if (l_set.size() > 0) loadPreparedStatements(l_set);
            }
            rs.close();
            if (selectRecs != null) {
                selectRecs.close();
                selectRecs = null;
            }
        } catch (Exception e) {
        }
    }
    /*
     *
     */
    private void loadPreparedStatements(List<String> set) {
        try {
            for (String str : set) {
                String SELECTFROMAVS = "SELECT * FROM CONFIGTYPES WHERE NAME='" +str + "'";
                PreparedStatement selectRecs = conn.prepareStatement(SELECTFROMAVS);
                ResultSet rs = selectRecs.executeQuery();
                while (rs.next()) {
                    String name = rs.getString(1);
                    String renderDocument = rs.getString(2);
                    List<String> l_set = parse(name, renderDocument);
                    if (!map.containsKey(name)) {
                        map.put(name, renderDocument);
                        ConfigType type = new ConfigType(renderDocument, this);
                        mapType.put(name, type);
                    }
                    if (l_set.size() > 0) loadPreparedStatements(l_set);
                }
                rs.close();
                if (selectRecs != null) {
                    selectRecs.close();
                    selectRecs = null;
                }
            }
        } catch (Exception e) {
        }
    }
    /*
     *
     */
    private void loadPreparedStatements() {
        String SELECTFROMAVS = "SELECT * FROM CONFIGTYPES WHERE NAME='" + FW_Avs + "'";
        try {
            selectOperRecs = conn.prepareStatement(SELECTFROMAVS);
            ResultSet rs = selectOperRecs.executeQuery();
            List<String> set = null;
            while (rs.next()) {
                String name = rs.getString(1);
                String renderDocument = rs.getString(2);
                set = parse(name, renderDocument);
                if (!map.containsKey(name)) {
                    map.put(name, renderDocument);
                    ConfigType type = new ConfigType(renderDocument, this);
                    mapType.put(name, type);
                }
            }
            rs.close();
            if (selectOperRecs != null) {
                selectOperRecs.close();
                selectOperRecs = null;
            }
            loadPreparedStatements(set);

            for (String key : map.keySet()) {
                String value = map.get(key);
            }
        } catch (Exception e) {
            logger.error("Error in loadPreparedStatements()" + e);
            e.printStackTrace();
        } finally {
            try {
                if (selectOperRecs != null) selectOperRecs.close();
            } catch (Exception e) {
                logger.error("Error in close stmt: " + e);
                e.printStackTrace();
            }
        }
    }
    /*
     *
     */
    public ConfigType getType(String name) {
        ConfigType t =  mapType.getOrDefault(name, null);
        if (t == null) {
            loadPreparedStatements(name);
            t =  mapType.getOrDefault(name, null);
        }
        return t;
    }
    /*
     *
     */
    public ConfigTypeDetails[] getDescendantTypeDetails(String name) {
        return null;
    }
    public String Avs2CSV(AVS Avses){

        String StrRet = null;
        String Fvalue = null;
        for (MainAvs mainAvs : MainAvses) {
System.out.println("AVS name: " + mainAvs.AvsName + "\n");

            for(String Field:mainAvs.getAvsField()) {
System.out.println("Field: " + Field + "\n");
                try{
                    Fvalue = Avses.getFieldValue(Field).toString();
                }catch(Exception e){
                    Fvalue = null;
                }
                if (Fvalue == null){
                    try{
                        AVSValue[] SubAvses = (AVSValue[]) Avses.getFieldValue(FW_SubAvs).getValue();
                        for (int i = 0; i < SubAvses.length; i++){
                            AVS tempavs = (AVS) SubAvses[i].getValue();
                            try{
                                Fvalue = tempavs.getFieldValue(Field).toString();
                            }catch (Exception e){ }
                            if (StrRet == null) {
                                StrRet = ((Fvalue == null)? "": Fvalue) + SubDelimiter;
                            } else {
                                StrRet = StrRet + ((Fvalue == null)? "": Fvalue) + SubDelimiter;
                            }
                        }
                    }catch(Exception e){ }
                } else {
                    if (StrRet == null) {
                        StrRet = Fvalue + Delimiter;
                    } else StrRet = StrRet + Fvalue + Delimiter;
                }
            }
            if (StrRet != null) break;
        }
        return StrRet;
    }
    /*
     *
     */
    public byte[] loadDataFileToByteArray(String filename) throws Exception {
        File dataFile = new File(filename);
        if (dataFile.length() == 0) throw new Exception("Data file " + filename + ": size should be greater than 0.");
        FileInputStream in = null;
        try {
            in = new FileInputStream(dataFile);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
            throw new Exception(e.getMessage());
        }
        if (dataFile.length() > Integer.MAX_VALUE) throw new Exception("Data file " + dataFile+ " too large, should be no larger than "+ Integer.toString(Integer.MAX_VALUE));
        int inByteArrayLength = (int) dataFile.length();
        byte[] bytearray = new byte[inByteArrayLength];
        try {
            int bytesRead = in.read(bytearray);
        } catch (IOException e) {
            e.printStackTrace();
            throw new Exception("Failed to read required number of bytes ("+ dataFile.length() + ") from dataFile: " + dataFile);
        }
        return bytearray;
    }
    public void getStringFromMainAvs() {
        for (MainAvs mainAvs : MainAvses) {
            String CsvHeader = "";
            for(String Field:mainAvs.getAvsField()) { 
                CsvHeader = CsvHeader + Field.toUpperCase() + mainAvs.getDel();
            }
            CsvHeader = mainAvs.getSubAvses(CsvHeader);
            csvHeader.put(mainAvs.getAvsName(), CsvHeader);
        }
        for (Map.Entry<String, String> e: csvHeader.entrySet()) {
            System.out.println(e.getValue());
        }
    }
   /*
     *
     */
    public static void  main(String[] args) {
        try {
            Options options = new Options();
            Option ConfFile = new Option("c", "conf", true, "the configuration file");
            ConfFile.setRequired(true);
            options.addOption(ConfFile);

            Option InFile = new Option("i", "input", true, "input data file path");
            InFile.setRequired(true);
            options.addOption(InFile);

            Option OutFile = new Option("o", "output", true, "output file");
            OutFile.setRequired(true);
            options.addOption(OutFile);

            Option Url = new Option("u", "url", true, "h2 url");
            Url.setRequired(true);
            options.addOption(Url);

            CommandLineParser CliParser = new DefaultParser();
            HelpFormatter formatter = new HelpFormatter();
            CommandLine cmd = null;

            try {
                cmd = CliParser.parse(options, args);
            } catch (ParseException e) {
                logger.error("Error parsing command line option! ", e);
                formatter.printHelp("utility-name", options);
            }
            String dataFile = cmd.getOptionValue("input");
            String OutputFile = cmd.getOptionValue("output");
            H2Url = cmd.getOptionValue("url");
            propertiesFile = cmd.getOptionValue("conf");

            Payload_decoder h = new Payload_decoder();
            h.HeadersToLower();
            h.loadPreparedStatements();
            h.ReadJsonConfig();
            //h.DumpJsonConfig();
            AVSTypeRepository.getInstance().initialize(h, false);
            zipTool.getInstance().initialize();
            AVSCodec avsCodec = new AVSCodec();
            CSVParser parser = new CSVParser(new FileReader(dataFile), CSVFormat.RFC4180);
            FileOutputStream fos = new FileOutputStream(OutputFile);
            Instant TimeStart = Instant.now();
            h.getStringFromMainAvs();
            for (CSVRecord record : parser) {
                String str = record.get(record.size() - 1);
                char F_char = str.charAt(0);
                if (str != null && !str.isEmpty()) {
                    str = str + "\n";
                    byte[] outByte = str.getBytes();
                    byte[] versionedByteArray = null;
                    if (F_char == '7') {
                        versionedByteArray = zipTool.getInstance().decompress(zipTool.getInstance().asHex(outByte));
                    } else {
                        versionedByteArray = zipTool.getInstance().appendBeginByte(zipTool.getInstance().asHex(outByte));
                    }
                    ByteBuffer byteBuffer = ByteBuffer.allocateDirect(versionedByteArray.length);
                    byteBuffer.put(versionedByteArray);
                    byteBuffer.position(0);
                    try {
                        AVS Avses = avsCodec.decodeAVS(byteBuffer);
                        if (Avses != null) {
                            String MyStr = h.Avs2CSV(Avses) + "\n";
                            fos.write(MyStr.getBytes());
                        }
                    } catch (ASN1Exception e) {
                        e.printStackTrace();
                    }
                }
                break;
            }
            Instant TimeEnd = Instant.now();
            Duration timeElapsed = Duration.between(TimeStart, TimeEnd);
            logger.info("INFO: Time taken: " + timeElapsed.toMillis() + " milliseconds");
            fos.close();
            h.close();
        } catch (Exception e) {
            e.printStackTrace();
            logger.error("Error" + e);
        }
    }
}
